import bp.Core.String
import bp.Collection.Array

UTF8String
	init
		self.data = Array<Byte>()
	
	init stri
		self.data = Array<Byte>()
		self.append(stri)
		
	init bytes : Array<Byte>
		self.data = Array<Byte>()
		self.append(bytes)
	
	print
		for i = 0 until self.data.length
			bp_print self.data[i]
		bp_print "\n"
	
	append stri
		for i = 0 until stri.lengthInBytes
			self.data.add(stri.data[i])
	
	append bytes : Array<Byte>
		for i = 0 until bytes.length
			self.data.add(bytes[i])
	
	append stri : ~MemPointer<ConstChar>
		len = bp_strlen(stri)
		for i = 0 until len
			self.data.add(stri[i])
		
	reverse
		self.data.reverse()
		
#	operator
#		[] index
#			count : Size = 0
#			for i = 0 to index
#				lead = self.data[i]
#				
#				if lead < 0x80
#					count += 1
#				elif (lead >> 5) == 0x6
#					count += 2
#				elif (lead >> 4) == 0xe
#					count += 3
#				elif (lead >> 3) == 0x1e
#					count += 4
#			
#			return self.data[index]
	
	operator
		+ stri : ~UTF8String
			cpy = ~UTF8String()
			cpy.append(self.data)
			cpy.append(stri)
			return cpy
			
		= stri : ~MemPointer<ConstChar>
			self.data = Array<Byte>()
			self.append(stri)
			
		#+= stri : ~UTF8String
			#len = stri.data.length
			#for i = 0 until len
			#	self.data.add(stri.data[i])
		
	get
		data
			return self.data
		
		length
			ensure
				result >= 0
			
			count : Size = 0
			len = self.data.length
			
			for i = 0 until len
				lead = self.data[i]
				count += 1
				
				if isUTF8Lead1(lead)
					continue
				elif isUTF8Lead2(lead)
					i += 1
				elif isUTF8Lead3(lead)
					i += 2
				elif isUTF8Lead4(lead)
					i += 3
			return count
			
		lengthInBytes
			ensure
				result >= 0
			
			return self.data.length
	
	to
		~MemPointer<Byte>
			return self.data.start

isUTF8Lead1 lead
	return lead < 0x80

isUTF8Lead2 lead
	return (lead >> 5) == 0x6

isUTF8Lead3 lead
	return (lead >> 4) == 0xE

isUTF8Lead4 lead
	return (lead >> 3) == 0x1E

print stri : ~UTF8String
	stri.print()

# TODO: define U8_IS_TRAIL(c) (((c)&0xc0)==0x80)