<module>
	<header>
		<title/>
		<dependencies>
			<import>
				bp.Core
			</import>
		</dependencies>
		<strings/>
	</header>
	<code>
		<target>
			<name>
				C++
			</name>
			<code>
				<include>
					Math.hpp
				</include>
			</code>
		</target>
		<extern>
			<extern-function>
				<name>
					bp_sin
				</name>
				<type>
					Float64
				</type>
			</extern-function>
			<extern-function>
				<name>
					bp_cos
				</name>
				<type>
					Float64
				</type>
			</extern-function>
			<extern-function>
				<name>
					bp_sqrt
				</name>
				<type>
					Float64
				</type>
			</extern-function>
			<extern-function>
				<name>
					bp_atan2
				</name>
				<type>
					Float64
				</type>
			</extern-function>
			<extern-function>
				<name>
					bp_log
				</name>
				<type>
					Float64
				</type>
			</extern-function>
			<extern-function>
				<name>
					bp_log10
				</name>
				<type>
					Float64
				</type>
			</extern-function>
		</extern>
		<const>
			<assign>
				<value>
					pi
				</value>
				<value>
					3.14159265358979323846264338327
				</value>
			</assign>
		</const>
		<const>
			<assign>
				<value>
					DEG_TO_RAD
				</value>
				<value>
					0.0174532925199432957692369076848861
				</value>
			</assign>
		</const>
		<const>
			<assign>
				<value>
					RAD_TO_DEG
				</value>
				<value>
					57.2957795130823208767981548141052
				</value>
			</assign>
		</const>
		<function>
			<name>
				degToRad
			</name>
			<parameters>
				<parameter>
					deg
				</parameter>
			</parameters>
			<code>
				<return>
					<multiply>
						<value>
							deg
						</value>
						<value>
							DEG_TO_RAD
						</value>
					</multiply>
				</return>
			</code>
		</function>
		<function>
			<name>
				radToDeg
			</name>
			<parameters>
				<parameter>
					rad
				</parameter>
			</parameters>
			<code>
				<return>
					<multiply>
						<value>
							rad
						</value>
						<value>
							RAD_TO_DEG
						</value>
					</multiply>
				</return>
			</code>
		</function>
		<function>
			<name>
				sin
			</name>
			<parameters>
				<parameter>
					radian
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_sin
						</function>
						<parameters>
							<parameter>
								radian
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				cos
			</name>
			<parameters>
				<parameter>
					radian
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_cos
						</function>
						<parameters>
							<parameter>
								radian
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				sqr
			</name>
			<parameters>
				<parameter>
					num
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_sqrt
						</function>
						<parameters>
							<parameter>
								num
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				aTan2
			</name>
			<parameters>
				<parameter>
					x
				</parameter>
				<parameter>
					y
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_atan2
						</function>
						<parameters>
							<parameter>
								y
							</parameter>
							<parameter>
								x
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				ln
			</name>
			<parameters>
				<parameter>
					x
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_log
						</function>
						<parameters>
							<parameter>
								x
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				lg
			</name>
			<parameters>
				<parameter>
					x
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_log10
						</function>
						<parameters>
							<parameter>
								x
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				sinDegree
			</name>
			<parameters>
				<parameter>
					degree
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_sin
						</function>
						<parameters>
							<parameter>
								<call>
									<function>
										degToRad
									</function>
									<parameters>
										<parameter>
											degree
										</parameter>
									</parameters>
								</call>
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				cosDegree
			</name>
			<parameters>
				<parameter>
					degree
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							bp_cos
						</function>
						<parameters>
							<parameter>
								<call>
									<function>
										radToDeg
									</function>
									<parameters>
										<parameter>
											degree
										</parameter>
									</parameters>
								</call>
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				distanceSq
			</name>
			<parameters>
				<parameter>
					x1
				</parameter>
				<parameter>
					y1
				</parameter>
				<parameter>
					x2
				</parameter>
				<parameter>
					y2
				</parameter>
			</parameters>
			<code>
				<assign>
					<value>
						dX
					</value>
					<value>
						<subtract>
							<value>
								x2
							</value>
							<value>
								x1
							</value>
						</subtract>
					</value>
				</assign>
				<assign>
					<value>
						dY
					</value>
					<value>
						<subtract>
							<value>
								y2
							</value>
							<value>
								y1
							</value>
						</subtract>
					</value>
				</assign>
				<return>
					<add>
						<value>
							<multiply>
								<value>
									dX
								</value>
								<value>
									dX
								</value>
							</multiply>
						</value>
						<value>
							<multiply>
								<value>
									dY
								</value>
								<value>
									dY
								</value>
							</multiply>
						</value>
					</add>
				</return>
			</code>
		</function>
		<function>
			<name>
				distance
			</name>
			<parameters>
				<parameter>
					x1
				</parameter>
				<parameter>
					y1
				</parameter>
				<parameter>
					x2
				</parameter>
				<parameter>
					y2
				</parameter>
			</parameters>
			<code>
				<return>
					<call>
						<function>
							sqr
						</function>
						<parameters>
							<parameter>
								<call>
									<function>
										distanceSq
									</function>
									<parameters>
										<parameter>
											x1
										</parameter>
										<parameter>
											y1
										</parameter>
										<parameter>
											x2
										</parameter>
										<parameter>
											y2
										</parameter>
									</parameters>
								</call>
							</parameter>
						</parameters>
					</call>
				</return>
			</code>
		</function>
		<function>
			<name>
				factorial
			</name>
			<parameters>
				<parameter>
					n
				</parameter>
			</parameters>
			<code>
				<require>
					<greater-or-equal>
						<value>
							n
						</value>
						<value>
							0
						</value>
					</greater-or-equal>
				</require>
				<ensure>
					<greater>
						<value>
							result
						</value>
						<value>
							0
						</value>
					</greater>
				</ensure>
				<maybe>
					<declare-type>
						<value>
							result
						</value>
						<value>
							BigInt
						</value>
					</declare-type>
				</maybe>
				<test>
					<call>
						<function>
							assert
						</function>
						<parameters>
							<parameter>
								<equal>
									<value>
										<call>
											<function>
												factorial
											</function>
											<parameters>
												<parameter>
													0
												</parameter>
											</parameters>
										</call>
									</value>
									<value>
										1
									</value>
								</equal>
							</parameter>
						</parameters>
					</call>
					<call>
						<function>
							assert
						</function>
						<parameters>
							<parameter>
								<equal>
									<value>
										<call>
											<function>
												factorial
											</function>
											<parameters>
												<parameter>
													10
												</parameter>
											</parameters>
										</call>
									</value>
									<value>
										3628800
									</value>
								</equal>
							</parameter>
						</parameters>
					</call>
					<call>
						<function>
							assert
						</function>
						<parameters>
							<parameter>
								<equal>
									<value>
										<call>
											<function>
												factorial
											</function>
											<parameters>
												<parameter>
													20
												</parameter>
											</parameters>
										</call>
									</value>
									<value>
										2432902008176640000
									</value>
								</equal>
							</parameter>
						</parameters>
					</call>
				</test>
				<if-block>
					<if>
						<condition>
							<equal>
								<value>
									n
								</value>
								<value>
									0
								</value>
							</equal>
						</condition>
						<code>
							<return>
								1
							</return>
						</code>
					</if>
				</if-block>
				<return>
					<multiply>
						<value>
							n
						</value>
						<value>
							<call>
								<function>
									factorial
								</function>
								<parameters>
									<parameter>
										<subtract>
											<value>
												n
											</value>
											<value>
												1
											</value>
										</subtract>
									</parameter>
								</parameters>
							</call>
						</value>
					</multiply>
				</return>
			</code>
		</function>
	</code>
</module>
