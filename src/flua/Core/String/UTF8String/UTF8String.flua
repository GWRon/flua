<module>
	<header>
		<title/>
		<dependencies>
			<import>flua.Core</import>
			<import>flua.Core.String</import>
			<import>flua.Core.Memory</import>
			<import>flua.Math</import>
		</dependencies>
		<strings>
			<string as-byte="true" id="flua_string_0">\S</string>
			<string as-byte="true" id="flua_string_1">\S</string>
		</strings>
	</header>
	<code>
		<assign depth="0" id="1">
			<value>EMPTY_STRING</value>
			<value>
				<new>
					<type>UTF8String</type>
					<parameters/>
				</new>
			</value>
		</assign>
		<class depth="0" id="2">
			<name>UTF8String</name>
			<code>
				<comment>\SSubstring\Sfrom\S#index\Sto\S#index\S+\S#length</comment>
				<function depth="1" id="3">
					<parameters>
						<parameter>index</parameter>
						<parameter>length</parameter>
					</parameters>
					<name>mid</name>
					<code>
						<require depth="2" id="4">
							<greater-or-equal depth="3" id="5">
								<value>index</value>
								<value>0</value>
							</greater-or-equal>
							<less depth="3" id="6">
								<value>index</value>
								<value>
									<access>
										<value>my</value>
										<value>length</value>
									</access>
								</value>
							</less>
						</require>
						<if-block depth="2" id="7">
							<if>
								<condition>
									<greater-or-equal>
										<value>length</value>
										<value>0</value>
									</greater-or-equal>
								</condition>
								<code>
									<return depth="3" id="8">
										<new>
											<type>UTF8String</type>
											<parameters>
												<parameter>
													<access>
														<value>my</value>
														<value>data</value>
													</access>
												</parameter>
												<parameter>index</parameter>
												<parameter>length</parameter>
											</parameters>
										</new>
									</return>
								</code>
							</if>
							<else depth="2" id="9">
								<code>
									<return depth="3" id="10">
										<new>
											<type>UTF8String</type>
											<parameters>
												<parameter>
													<access>
														<value>my</value>
														<value>data</value>
													</access>
												</parameter>
												<parameter>index</parameter>
												<parameter>
													<subtract>
														<value>
															<access>
																<value>my</value>
																<value>length</value>
															</access>
														</value>
														<value>index</value>
													</subtract>
												</parameter>
											</parameters>
										</new>
									</return>
								</code>
							</else>
						</if-block>
					</code>
					<meta/>
				</function>
				<comment>\SSubstring</comment>
				<function depth="1" id="11">
					<parameters>
						<parameter>from</parameter>
						<parameter>to</parameter>
					</parameters>
					<name>substr</name>
					<code>
						<return depth="2" id="12">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>from</parameter>
									<parameter>
										<subtract>
											<value>to</value>
											<value>from</value>
										</subtract>
									</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SSubstring\Susing\Sbyte\Sindices\Sfor\S#from\Sand\S#to</comment>
				<function depth="1" id="13">
					<parameters>
						<parameter>from</parameter>
						<parameter>to</parameter>
					</parameters>
					<name>substrBytes</name>
					<code>
						<if-block depth="2" id="14">
							<if>
								<condition>
									<equal>
										<value>to</value>
										<value>
											<negative>
												<value>1</value>
											</negative>
										</value>
									</equal>
								</condition>
								<code>
									<return depth="3" id="15">
										<new>
											<type>UTF8String</type>
											<parameters>
												<parameter>
													<access>
														<value>my</value>
														<value>data</value>
													</access>
												</parameter>
												<parameter>from</parameter>
												<parameter>
													<access>
														<value>my</value>
														<value>lengthInBytes</value>
													</access>
												</parameter>
												<parameter>true</parameter>
											</parameters>
										</new>
									</return>
								</code>
							</if>
							<else depth="2" id="16">
								<code>
									<return depth="3" id="17">
										<new>
											<type>UTF8String</type>
											<parameters>
												<parameter>
													<access>
														<value>my</value>
														<value>data</value>
													</access>
												</parameter>
												<parameter>from</parameter>
												<parameter>to</parameter>
												<parameter>true</parameter>
											</parameters>
										</new>
									</return>
								</code>
							</else>
						</if-block>
					</code>
				</function>
				<comment>\SReplaces\Sall\Soccurences\Sof\S#search\Swith\Sthe\Sstring\S#replaceWith</comment>
				<function depth="1" id="18">
					<parameters>
						<parameter>search</parameter>
						<parameter>replaceWith</parameter>
					</parameters>
					<name>replace</name>
					<code>
						<assign depth="2" id="19">
							<value>srcPos</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="20">
							<value>destPos</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="21">
							<value>nextOcc</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="22">
							<value>lenSkipped</value>
							<value>0</value>
						</assign>
						<if-block depth="2" id="23">
							<if>
								<condition>
									<greater-or-equal>
										<value>
											<access>
												<value>search</value>
												<value>lengthInBytes</value>
											</access>
										</value>
										<value>
											<access>
												<value>replaceWith</value>
												<value>lengthInBytes</value>
											</access>
										</value>
									</greater-or-equal>
								</condition>
								<code>
									<assign depth="3" id="24">
										<value>mem</value>
										<value>
											<new>
												<type>
													<template-call>
														<value>MemPointer</value>
														<value>Byte</value>
													</template-call>
												</type>
												<parameters>
													<parameter>
														<access>
															<value>my</value>
															<value>lengthInBytes</value>
														</access>
													</parameter>
												</parameters>
											</new>
										</value>
									</assign>
								</code>
							</if>
							<else depth="2" id="25">
								<code>
									<assign depth="3" id="26">
										<value>occs</value>
										<value>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>count</value>
													</access>
												</function>
												<parameters>
													<parameter>search</parameter>
												</parameters>
											</call>
										</value>
									</assign>
									<assign depth="3" id="27">
										<value>diff</value>
										<value>
											<subtract>
												<value>
													<access>
														<value>replaceWith</value>
														<value>lengthInBytes</value>
													</access>
												</value>
												<value>
													<access>
														<value>search</value>
														<value>lengthInBytes</value>
													</access>
												</value>
											</subtract>
										</value>
									</assign>
									<assign depth="3" id="28">
										<value>mem</value>
										<value>
											<new>
												<type>
													<template-call>
														<value>MemPointer</value>
														<value>Byte</value>
													</template-call>
												</type>
												<parameters>
													<parameter>
														<add>
															<value>
																<access>
																	<value>my</value>
																	<value>lengthInBytes</value>
																</access>
															</value>
															<value>
																<multiply>
																	<value>occs</value>
																	<value>diff</value>
																</multiply>
															</value>
														</add>
													</parameter>
												</parameters>
											</new>
										</value>
									</assign>
								</code>
							</else>
						</if-block>
						<while depth="2" id="29">
							<condition>1</condition>
							<code>
								<assign depth="3" id="30">
									<value>nextOcc</value>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>findByteIndex</value>
												</access>
											</function>
											<parameters>
												<parameter>search</parameter>
												<parameter>srcPos</parameter>
											</parameters>
										</call>
									</value>
								</assign>
								<if-block depth="3" id="31">
									<if>
										<condition>
											<equal>
												<value>nextOcc</value>
												<value>
													<negative>
														<value>1</value>
													</negative>
												</value>
											</equal>
										</condition>
										<code>
											<call depth="4" id="32">
												<function>copyMem</function>
												<parameters>
													<parameter>
														<add>
															<value>
																<access>
																	<value>my</value>
																	<value>data</value>
																</access>
															</value>
															<value>srcPos</value>
														</add>
													</parameter>
													<parameter>
														<add>
															<value>mem</value>
															<value>destPos</value>
														</add>
													</parameter>
													<parameter>
														<subtract>
															<value>
																<access>
																	<value>my</value>
																	<value>lengthInBytes</value>
																</access>
															</value>
															<value>srcPos</value>
														</subtract>
													</parameter>
												</parameters>
											</call>
											<return depth="4" id="33">
												<new>
													<type>UTF8String</type>
													<parameters>
														<parameter>mem</parameter>
													</parameters>
												</new>
											</return>
										</code>
									</if>
								</if-block>
								<comment>\SCopy\Sprevious\Spart</comment>
								<assign depth="3" id="34">
									<value>lenSkipped</value>
									<value>
										<subtract>
											<value>nextOcc</value>
											<value>srcPos</value>
										</subtract>
									</value>
								</assign>
								<call depth="3" id="35">
									<function>copyMem</function>
									<parameters>
										<parameter>
											<add>
												<value>
													<access>
														<value>my</value>
														<value>data</value>
													</access>
												</value>
												<value>srcPos</value>
											</add>
										</parameter>
										<parameter>
											<add>
												<value>mem</value>
												<value>destPos</value>
											</add>
										</parameter>
										<parameter>lenSkipped</parameter>
									</parameters>
								</call>
								<comment>\SCopy\Sreplaced\Spart</comment>
								<assign-add depth="3" id="36">
									<value>destPos</value>
									<value>lenSkipped</value>
								</assign-add>
								<call depth="3" id="37">
									<function>copyMem</function>
									<parameters>
										<parameter>
											<access>
												<value>replaceWith</value>
												<value>data</value>
											</access>
										</parameter>
										<parameter>
											<add>
												<value>mem</value>
												<value>destPos</value>
											</add>
										</parameter>
										<parameter>
											<access>
												<value>replaceWith</value>
												<value>lengthInBytes</value>
											</access>
										</parameter>
									</parameters>
								</call>
								<comment>\SIncrement\Scounter</comment>
								<assign-add depth="3" id="38">
									<value>destPos</value>
									<value>
										<access>
											<value>replaceWith</value>
											<value>lengthInBytes</value>
										</access>
									</value>
								</assign-add>
								<assign depth="3" id="39">
									<value>srcPos</value>
									<value>
										<add>
											<value>nextOcc</value>
											<value>
												<access>
													<value>search</value>
													<value>lengthInBytes</value>
												</access>
											</value>
										</add>
									</value>
								</assign>
							</code>
						</while>
					</code>
				</function>
				<comment>\SReturns\Show\Soften\S#chars\Sappears\Sin\Sthe\Sstring</comment>
				<function depth="1" id="40">
					<parameters>
						<parameter>chars</parameter>
					</parameters>
					<name>count</name>
					<code>
						<assign depth="2" id="41">
							<value>count</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="42">
							<value>found</value>
							<value>
								<negative>
									<value>1</value>
								</negative>
							</value>
						</assign>
						<while depth="2" id="43">
							<condition>1</condition>
							<code>
								<assign depth="3" id="44">
									<value>found</value>
									<value>
										<call>
											<function>
												<access>
													<value>my</value>
													<value>findByteIndex</value>
												</access>
											</function>
											<parameters>
												<parameter>chars</parameter>
												<parameter>
													<add>
														<value>found</value>
														<value>1</value>
													</add>
												</parameter>
											</parameters>
										</call>
									</value>
								</assign>
								<if-block depth="3" id="45">
									<if>
										<condition>
											<equal>
												<value>found</value>
												<value>
													<negative>
														<value>1</value>
													</negative>
												</value>
											</equal>
										</condition>
										<code>
											<return depth="4" id="46">count</return>
										</code>
									</if>
								</if-block>
								<assign-add depth="3" id="47">
									<value>count</value>
									<value>1</value>
								</assign-add>
							</code>
						</while>
					</code>
				</function>
				<comment>\SReturns\Sthe\Sposition\Sof\Sthe\Sfirst\Soccurence\Sof\S#chars</comment>
				<comment>\Sfrom\Sthe\Sposition\S#fromIndex\Sin\Sthe\Sstring,\S-1\Sif\Snot\Sfound</comment>
				<function depth="1" id="48">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
						<parameter>
							<assign>
								<value>
									<declare-type>
										<value>fromIndex</value>
										<value>Size</value>
									</declare-type>
								</value>
								<value>0</value>
							</assign>
						</parameter>
					</parameters>
					<name>find</name>
					<code>
						<assign depth="2" id="49">
							<value>matchedChars</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="50">
							<value>snapshot</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="51">
							<value>start</value>
							<value>0</value>
						</assign>
						<assign depth="2" id="52">
							<value>count</value>
							<value>fromIndex</value>
						</assign>
						<for depth="2" id="53">
							<iterator>i</iterator>
							<from>0</from>
							<until>
								<call>
									<function>min</function>
									<parameters>
										<parameter>fromIndex</parameter>
										<parameter>
											<access>
												<value>my</value>
												<value>length</value>
											</access>
										</parameter>
									</parameters>
								</call>
							</until>
							<code>
								<assign-add depth="3" id="54">
									<value>start</value>
									<value>
										<call>
											<function>utf8ByteLength</function>
											<parameters>
												<parameter>
													<index>
														<value>
															<access>
																<value>my</value>
																<value>data</value>
															</access>
														</value>
														<value>start</value>
													</index>
												</parameter>
											</parameters>
										</call>
									</value>
								</assign-add>
							</code>
						</for>
						<for depth="2" id="55">
							<iterator>i</iterator>
							<from>start</from>
							<until>
								<access>
									<value>my</value>
									<value>lengthInBytes</value>
								</access>
							</until>
							<code>
								<if-block depth="3" id="56">
									<if>
										<condition>
											<equal>
												<value>
													<index>
														<value>
															<access>
																<value>my</value>
																<value>data</value>
															</access>
														</value>
														<value>i</value>
													</index>
												</value>
												<value>
													<index>
														<value>
															<access>
																<value>chars</value>
																<value>data</value>
															</access>
														</value>
														<value>matchedChars</value>
													</index>
												</value>
											</equal>
										</condition>
										<code>
											<if-block depth="4" id="57">
												<if>
													<condition>
														<equal>
															<value>matchedChars</value>
															<value>0</value>
														</equal>
													</condition>
													<code>
														<assign depth="5" id="58">
															<value>snapshot</value>
															<value>count</value>
														</assign>
													</code>
												</if>
											</if-block>
											<if-block depth="4" id="59">
												<if>
													<condition>
														<equal>
															<value>matchedChars</value>
															<value>
																<subtract>
																	<value>
																		<access>
																			<value>chars</value>
																			<value>lengthInBytes</value>
																		</access>
																	</value>
																	<value>1</value>
																</subtract>
															</value>
														</equal>
													</condition>
													<code>
														<return depth="5" id="60">snapshot</return>
													</code>
												</if>
											</if-block>
											<assign-add depth="4" id="61">
												<value>matchedChars</value>
												<value>1</value>
											</assign-add>
										</code>
									</if>
									<else depth="3" id="62">
										<code>
											<assign depth="4" id="63">
												<value>matchedChars</value>
												<value>0</value>
											</assign>
										</code>
									</else>
								</if-block>
								<if-block depth="3" id="64">
									<if>
										<condition>
											<call>
												<function>isUTF8StartByte</function>
												<parameters>
													<parameter>
														<index>
															<value>
																<access>
																	<value>my</value>
																	<value>data</value>
																</access>
															</value>
															<value>i</value>
														</index>
													</parameter>
												</parameters>
											</call>
										</condition>
										<code>
											<assign-add depth="4" id="65">
												<value>count</value>
												<value>1</value>
											</assign-add>
										</code>
									</if>
								</if-block>
							</code>
						</for>
						<return depth="2" id="66">
							<negative>
								<value>1</value>
							</negative>
						</return>
					</code>
				</function>
				<comment>\SReturns\Sthe\Sbyte\Sposition\Sof\Sthe\Sfirst\Soccurence\Sof\S#chars</comment>
				<comment>\Sfrom\Sthe\Sbyte\Sposition\S#fromByteIndex\Sin\Sthe\Sstring,\S-1\Sif\Snot\Sfound</comment>
				<function depth="1" id="67">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
						<parameter>
							<assign>
								<value>
									<declare-type>
										<value>fromByteIndex</value>
										<value>Size</value>
									</declare-type>
								</value>
								<value>0</value>
							</assign>
						</parameter>
					</parameters>
					<name>findByteIndex</name>
					<code>
						<require depth="2" id="68">
							<greater-or-equal depth="3" id="69">
								<value>fromByteIndex</value>
								<value>0</value>
							</greater-or-equal>
						</require>
						<ensure depth="2" id="70">
							<greater-or-equal depth="3" id="71">
								<value>result</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</greater-or-equal>
						</ensure>
						<assign depth="2" id="72">
							<value>matchedChars</value>
							<value>0</value>
						</assign>
						<for depth="2" id="73">
							<iterator>i</iterator>
							<from>fromByteIndex</from>
							<until>
								<access>
									<value>my</value>
									<value>lengthInBytes</value>
								</access>
							</until>
							<code>
								<if-block depth="3" id="74">
									<if>
										<condition>
											<equal>
												<value>
													<index>
														<value>
															<access>
																<value>my</value>
																<value>data</value>
															</access>
														</value>
														<value>i</value>
													</index>
												</value>
												<value>
													<index>
														<value>
															<access>
																<value>chars</value>
																<value>data</value>
															</access>
														</value>
														<value>matchedChars</value>
													</index>
												</value>
											</equal>
										</condition>
										<code>
											<if-block depth="4" id="75">
												<if>
													<condition>
														<equal>
															<value>matchedChars</value>
															<value>
																<subtract>
																	<value>
																		<access>
																			<value>chars</value>
																			<value>lengthInBytes</value>
																		</access>
																	</value>
																	<value>1</value>
																</subtract>
															</value>
														</equal>
													</condition>
													<code>
														<return depth="5" id="76">
															<subtract>
																<value>i</value>
																<value>matchedChars</value>
															</subtract>
														</return>
													</code>
												</if>
											</if-block>
											<assign-add depth="4" id="77">
												<value>matchedChars</value>
												<value>1</value>
											</assign-add>
										</code>
									</if>
									<else depth="3" id="78">
										<code>
											<assign depth="4" id="79">
												<value>matchedChars</value>
												<value>0</value>
											</assign>
										</code>
									</else>
								</if-block>
							</code>
						</for>
						<return depth="2" id="80">
							<negative>
								<value>1</value>
							</negative>
						</return>
					</code>
				</function>
				<comment>\SReturns\Sthe\Sbyte\Sposition\Sof\Sthe\Sfirst\Soccurence\Sof\Sthe\Sbyte\S#char</comment>
				<comment>\Sfrom\Sthe\Sbyte\Sposition\S#fromByteIndex\Sin\Sthe\Sstring,\S-1\Sif\Snot\Sfound</comment>
				<function depth="1" id="81">
					<parameters>
						<parameter>
							<declare-type>
								<value>char</value>
								<value>Byte</value>
							</declare-type>
						</parameter>
						<parameter>
							<assign>
								<value>
									<declare-type>
										<value>fromByteIndex</value>
										<value>Size</value>
									</declare-type>
								</value>
								<value>0</value>
							</assign>
						</parameter>
					</parameters>
					<name>findByteIndex</name>
					<code>
						<for depth="2" id="82">
							<iterator>i</iterator>
							<from>fromByteIndex</from>
							<until>
								<access>
									<value>my</value>
									<value>lengthInBytes</value>
								</access>
							</until>
							<code>
								<if-block depth="3" id="83">
									<if>
										<condition>
											<equal>
												<value>
													<index>
														<value>
															<access>
																<value>my</value>
																<value>data</value>
															</access>
														</value>
														<value>i</value>
													</index>
												</value>
												<value>char</value>
											</equal>
										</condition>
										<code>
											<return depth="4" id="84">i</return>
										</code>
									</if>
								</if-block>
							</code>
						</for>
						<return depth="2" id="85">
							<negative>
								<value>1</value>
							</negative>
						</return>
					</code>
				</function>
				<comment>\SReturns\Sthe\Sleft\Spart\Sof\Sthe\Sstring\Suntil\S#chars\Sappears</comment>
				<function depth="1" id="86">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>until</name>
					<code>
						<assign depth="2" id="87">
							<value>pos</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>find</value>
										</access>
									</function>
									<parameters>
										<parameter>chars</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<return depth="2" id="88">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>0</parameter>
									<parameter>pos</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SReturns\Sthe\Sleft\Spart\Sof\Sthe\Sstring\Suntil\Sthe\Slast\Soccurence\Sof\S#chars\Sappears</comment>
				<function depth="1" id="89">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>untilLast</name>
					<code>
						<noop depth="2" id="90"/>
					</code>
				</function>
				<comment>\SSubstring\Sfrom\Sthe\Spoint\Schars\Sappears</comment>
				<function depth="1" id="91">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>from</name>
					<code>
						<assign depth="2" id="92">
							<value>pos</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>find</value>
										</access>
									</function>
									<parameters>
										<parameter>chars</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<return depth="2" id="93">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>pos</parameter>
									<parameter>
										<subtract>
											<value>
												<access>
													<value>my</value>
													<value>length</value>
												</access>
											</value>
											<value>pos</value>
										</subtract>
									</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SSubstring\Sfrom\Sthe\Slast\Soccurence\Sof\S#chars</comment>
				<function depth="1" id="94">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>fromLast</name>
					<code>
						<noop depth="2" id="95"/>
					</code>
				</function>
				<comment>\SSubstring\Safter\Sthe\Sfirst\Soccurence\Sof\S#chars</comment>
				<function depth="1" id="96">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>after</name>
					<code>
						<assign depth="2" id="97">
							<value>pos</value>
							<value>
								<call>
									<function>
										<access>
											<value>my</value>
											<value>find</value>
										</access>
									</function>
									<parameters>
										<parameter>chars</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<if-block depth="2" id="98">
							<if>
								<condition>
									<not-equal>
										<value>pos</value>
										<value>
											<negative>
												<value>1</value>
											</negative>
										</value>
									</not-equal>
								</condition>
								<code>
									<return depth="3" id="99">
										<call>
											<function>
												<access>
													<value>my</value>
													<value>mid</value>
												</access>
											</function>
											<parameters>
												<parameter>
													<add>
														<value>pos</value>
														<value>
															<access>
																<value>chars</value>
																<value>length</value>
															</access>
														</value>
													</add>
												</parameter>
												<parameter>
													<subtract>
														<value>
															<subtract>
																<value>
																	<access>
																		<value>my</value>
																		<value>length</value>
																	</access>
																</value>
																<value>pos</value>
															</subtract>
														</value>
														<value>
															<access>
																<value>chars</value>
																<value>length</value>
															</access>
														</value>
													</subtract>
												</parameter>
											</parameters>
										</call>
									</return>
								</code>
							</if>
							<else depth="2" id="100">
								<code>
									<return depth="3" id="101">EMPTY_STRING</return>
								</code>
							</else>
						</if-block>
					</code>
				</function>
				<comment>\SLeft\S#length\Scharacters</comment>
				<function depth="1" id="102">
					<parameters>
						<parameter>length</parameter>
					</parameters>
					<name>left</name>
					<code>
						<return depth="2" id="103">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>0</parameter>
									<parameter>length</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SRight\S#length\Scharacters</comment>
				<function depth="1" id="104">
					<parameters>
						<parameter>length</parameter>
					</parameters>
					<name>right</name>
					<code>
						<return depth="2" id="105">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>
										<subtract>
											<value>
												<access>
													<value>my</value>
													<value>length</value>
												</access>
											</value>
											<value>length</value>
										</subtract>
									</parameter>
									<parameter>length</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SDeletes\Sall\Soccurences\Sof\S#chars\Sfrom\Sthe\Sstring</comment>
				<function depth="1" id="106">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>erase</name>
					<code>
						<return depth="2" id="107">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>replace</value>
									</access>
								</function>
								<parameters>
									<parameter>chars</parameter>
									<parameter>EMPTY_STRING</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SDelete\S#characterCount\Scharacters\Sfrom\Sthe\Sstring</comment>
				<function depth="1" id="108">
					<parameters>
						<parameter>
							<declare-type>
								<value>characterCount</value>
								<value>Size</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>eraseLeft</name>
					<code>
						<return depth="2" id="109">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>characterCount</parameter>
									<parameter>
										<subtract>
											<value>
												<access>
													<value>my</value>
													<value>length</value>
												</access>
											</value>
											<value>characterCount</value>
										</subtract>
									</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SDelete\S#chars\Sfrom\Sthe\Sstring\Sif\Sthe\Sstring\Sstarts\Swith\S#chars</comment>
				<function depth="1" id="110">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>eraseLeft</name>
					<code>
						<if-block depth="2" id="111">
							<if>
								<condition>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>startsWith</value>
											</access>
										</function>
										<parameters>
											<parameter>chars</parameter>
										</parameters>
									</call>
								</condition>
								<code>
									<return depth="3" id="112">
										<call>
											<function>
												<access>
													<value>my</value>
													<value>eraseLeft</value>
												</access>
											</function>
											<parameters>
												<parameter>
													<access>
														<value>chars</value>
														<value>length</value>
													</access>
												</parameter>
											</parameters>
										</call>
									</return>
								</code>
							</if>
							<else depth="2" id="113">
								<code>
									<return depth="3" id="114">my</return>
								</code>
							</else>
						</if-block>
					</code>
				</function>
				<comment>\SDelete\S#characterCount\Scharacters\Sfrom\Sthe\Sstring\Sat\Sthe\Send</comment>
				<function depth="1" id="115">
					<parameters>
						<parameter>
							<declare-type>
								<value>characterCount</value>
								<value>Size</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>eraseRight</name>
					<code>
						<return depth="2" id="116">
							<call>
								<function>
									<access>
										<value>my</value>
										<value>mid</value>
									</access>
								</function>
								<parameters>
									<parameter>0</parameter>
									<parameter>
										<subtract>
											<value>
												<access>
													<value>my</value>
													<value>length</value>
												</access>
											</value>
											<value>characterCount</value>
										</subtract>
									</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SDelete\S#chars\Sfrom\Sthe\Sstring\Sif\Sthe\Sstringe\Sends\Swith\S#chars</comment>
				<function depth="1" id="117">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>eraseRight</name>
					<code>
						<if-block depth="2" id="118">
							<if>
								<condition>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>endsWith</value>
											</access>
										</function>
										<parameters>
											<parameter>chars</parameter>
										</parameters>
									</call>
								</condition>
								<code>
									<return depth="3" id="119">
										<call>
											<function>
												<access>
													<value>my</value>
													<value>eraseRight</value>
												</access>
											</function>
											<parameters>
												<parameter>
													<access>
														<value>chars</value>
														<value>length</value>
													</access>
												</parameter>
											</parameters>
										</call>
									</return>
								</code>
							</if>
							<else depth="2" id="120">
								<code>
									<return depth="3" id="121">my</return>
								</code>
							</else>
						</if-block>
					</code>
				</function>
				<comment>\SReturns\Swhether\Sthe\Sstring\Sstarts\Swith\S#chars</comment>
				<function depth="1" id="122">
					<parameters>
						<parameter>chars</parameter>
					</parameters>
					<name>startsWith</name>
					<code>
						<return depth="2" id="123">
							<call>
								<function>compareMem</function>
								<parameters>
									<parameter>
										<access>
											<value>my</value>
											<value>data</value>
										</access>
									</parameter>
									<parameter>
										<access>
											<value>chars</value>
											<value>data</value>
										</access>
									</parameter>
									<parameter>
										<access>
											<value>chars</value>
											<value>lengthInBytes</value>
										</access>
									</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SReturns\Swhether\Sthe\Sstring\Sends\Swith\S#chars</comment>
				<function depth="1" id="124">
					<parameters>
						<parameter>chars</parameter>
					</parameters>
					<name>endsWith</name>
					<code>
						<return depth="2" id="125">
							<call>
								<function>compareMem</function>
								<parameters>
									<parameter>
										<subtract>
											<value>
												<add>
													<value>
														<access>
															<value>my</value>
															<value>data</value>
														</access>
													</value>
													<value>
														<access>
															<value>my</value>
															<value>lengthInBytes</value>
														</access>
													</value>
												</add>
											</value>
											<value>
												<access>
													<value>chars</value>
													<value>lengthInBytes</value>
												</access>
											</value>
										</subtract>
									</parameter>
									<parameter>
										<access>
											<value>chars</value>
											<value>data</value>
										</access>
									</parameter>
									<parameter>
										<access>
											<value>chars</value>
											<value>lengthInBytes</value>
										</access>
									</parameter>
								</parameters>
							</call>
						</return>
					</code>
				</function>
				<comment>\SReturns\Strue\Sif\Sthe\Sstring\Scontains\S#chars,\Sotherwise\Sfalse</comment>
				<function depth="1" id="126">
					<parameters>
						<parameter>
							<declare-type>
								<value>chars</value>
								<value>UTF8String</value>
							</declare-type>
						</parameter>
					</parameters>
					<name>contains</name>
					<code>
						<return depth="2" id="127">
							<not-equal>
								<value>
									<call>
										<function>
											<access>
												<value>my</value>
												<value>find</value>
											</access>
										</function>
										<parameters>
											<parameter>chars</parameter>
										</parameters>
									</call>
								</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</not-equal>
						</return>
					</code>
				</function>
				<comment>\SReturns\Sthe\Ssame\Sstring\Swith\Sall\Scharacters\Sbeing\Slower-case</comment>
				<comment>\STODO:\SMake\Sit\Swork\Swith\SUnicode\S/\SUTF-8</comment>
				<function depth="1" id="128">
					<name>lower</name>
					<code>
						<assign depth="2" id="129">
							<value>mem</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>MemPointer</value>
											<value>Byte</value>
										</template-call>
									</type>
									<parameters>
										<parameter>
											<access>
												<value>my</value>
												<value>lengthInBytes</value>
											</access>
										</parameter>
									</parameters>
								</new>
							</value>
						</assign>
						<foreach depth="2" id="130">
							<counter>c</counter>
							<iterator>x</iterator>
							<collection>
								<access>
									<value>my</value>
									<value>bytes</value>
								</access>
							</collection>
							<code>
								<assign depth="3" id="131">
									<value>
										<index>
											<value>mem</value>
											<value>c</value>
										</index>
									</value>
									<value>
										<call>
											<function>toLower</function>
											<parameters>
												<parameter>x</parameter>
											</parameters>
										</call>
									</value>
								</assign>
							</code>
						</foreach>
						<return depth="2" id="132">
							<new>
								<type>UTF8String</type>
								<parameters>
									<parameter>mem</parameter>
								</parameters>
							</new>
						</return>
					</code>
				</function>
				<comment>\SReturns\Sthe\Ssame\Sstring\Swith\Sall\Scharacters\Sbeing\Supper-case</comment>
				<comment>\STODO:\SMake\Sit\Swork\Swith\SUnicode\S/\SUTF-8</comment>
				<function depth="1" id="133">
					<name>upper</name>
					<code>
						<assign depth="2" id="134">
							<value>mem</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>MemPointer</value>
											<value>Byte</value>
										</template-call>
									</type>
									<parameters>
										<parameter>
											<access>
												<value>my</value>
												<value>lengthInBytes</value>
											</access>
										</parameter>
									</parameters>
								</new>
							</value>
						</assign>
						<foreach depth="2" id="135">
							<counter>c</counter>
							<iterator>x</iterator>
							<collection>
								<access>
									<value>my</value>
									<value>bytes</value>
								</access>
							</collection>
							<code>
								<assign depth="3" id="136">
									<value>
										<index>
											<value>mem</value>
											<value>c</value>
										</index>
									</value>
									<value>
										<call>
											<function>toUpper</function>
											<parameters>
												<parameter>x</parameter>
											</parameters>
										</call>
									</value>
								</assign>
							</code>
						</foreach>
						<return depth="2" id="137">
							<new>
								<type>UTF8String</type>
								<parameters>
									<parameter>mem</parameter>
								</parameters>
							</new>
						</return>
					</code>
				</function>
				<comment>\SPad\Sleft</comment>
				<function depth="1" id="138">
					<parameters>
						<parameter>x</parameter>
						<parameter>
							<assign>
								<value>
									<declare-type>
										<value>byte</value>
										<value>Byte</value>
									</declare-type>
								</value>
								<value>flua_string_0</value>
							</assign>
						</parameter>
					</parameters>
					<name>padLeft</name>
					<code>
						<if-block depth="2" id="139">
							<if>
								<condition>
									<less-or-equal>
										<value>x</value>
										<value>0</value>
									</less-or-equal>
								</condition>
								<code>
									<return depth="3" id="140">EMPTY_STRING</return>
								</code>
							</if>
						</if-block>
						<assign depth="2" id="141">
							<value>newData</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>MemPointer</value>
											<value>Byte</value>
										</template-call>
									</type>
									<parameters>
										<parameter>x</parameter>
									</parameters>
								</new>
							</value>
						</assign>
						<assign depth="2" id="142">
							<value>actualLength</value>
							<value>
								<call>
									<function>min</function>
									<parameters>
										<parameter>x</parameter>
										<parameter>
											<access>
												<value>my</value>
												<value>lengthInBytes</value>
											</access>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<call depth="2" id="143">
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>my</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>newData</parameter>
								<parameter>actualLength</parameter>
							</parameters>
						</call>
						<if-block depth="2" id="144">
							<if>
								<condition>
									<greater>
										<value>
											<subtract>
												<value>x</value>
												<value>actualLength</value>
											</subtract>
										</value>
										<value>0</value>
									</greater>
								</condition>
								<code>
									<call depth="3" id="145">
										<function>setMem</function>
										<parameters>
											<parameter>
												<add>
													<value>newData</value>
													<value>actualLength</value>
												</add>
											</parameter>
											<parameter>byte</parameter>
											<parameter>
												<subtract>
													<value>x</value>
													<value>actualLength</value>
												</subtract>
											</parameter>
										</parameters>
									</call>
								</code>
							</if>
						</if-block>
						<return depth="2" id="146">
							<new>
								<type>UTF8String</type>
								<parameters>
									<parameter>newData</parameter>
								</parameters>
							</new>
						</return>
					</code>
				</function>
				<comment>\SPad\Sright</comment>
				<function depth="1" id="147">
					<parameters>
						<parameter>x</parameter>
						<parameter>
							<assign>
								<value>
									<declare-type>
										<value>byte</value>
										<value>Byte</value>
									</declare-type>
								</value>
								<value>flua_string_1</value>
							</assign>
						</parameter>
					</parameters>
					<name>padRight</name>
					<code>
						<if-block depth="2" id="148">
							<if>
								<condition>
									<less-or-equal>
										<value>x</value>
										<value>0</value>
									</less-or-equal>
								</condition>
								<code>
									<return depth="3" id="149">EMPTY_STRING</return>
								</code>
							</if>
						</if-block>
						<assign depth="2" id="150">
							<value>newData</value>
							<value>
								<new>
									<type>
										<template-call>
											<value>MemPointer</value>
											<value>Byte</value>
										</template-call>
									</type>
									<parameters>
										<parameter>x</parameter>
									</parameters>
								</new>
							</value>
						</assign>
						<assign depth="2" id="151">
							<value>actualLength</value>
							<value>
								<call>
									<function>min</function>
									<parameters>
										<parameter>x</parameter>
										<parameter>
											<access>
												<value>my</value>
												<value>lengthInBytes</value>
											</access>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<assign depth="2" id="152">
							<value>offset</value>
							<value>
								<subtract>
									<value>x</value>
									<value>
										<access>
											<value>my</value>
											<value>lengthInBytes</value>
										</access>
									</value>
								</subtract>
							</value>
						</assign>
						<assign depth="2" id="153">
							<value>myOffset</value>
							<value>
								<call>
									<function>max</function>
									<parameters>
										<parameter>0</parameter>
										<parameter>
											<negative>
												<value>offset</value>
											</negative>
										</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<assign depth="2" id="154">
							<value>offset</value>
							<value>
								<call>
									<function>max</function>
									<parameters>
										<parameter>0</parameter>
										<parameter>offset</parameter>
									</parameters>
								</call>
							</value>
						</assign>
						<call depth="2" id="155">
							<function>copyMem</function>
							<parameters>
								<parameter>
									<add>
										<value>
											<access>
												<value>my</value>
												<value>data</value>
											</access>
										</value>
										<value>myOffset</value>
									</add>
								</parameter>
								<parameter>
									<add>
										<value>newData</value>
										<value>offset</value>
									</add>
								</parameter>
								<parameter>actualLength</parameter>
							</parameters>
						</call>
						<if-block depth="2" id="156">
							<if>
								<condition>
									<greater>
										<value>offset</value>
										<value>0</value>
									</greater>
								</condition>
								<code>
									<call depth="3" id="157">
										<function>setMem</function>
										<parameters>
											<parameter>newData</parameter>
											<parameter>byte</parameter>
											<parameter>offset</parameter>
										</parameters>
									</call>
								</code>
							</if>
						</if-block>
						<return depth="2" id="158">
							<new>
								<type>UTF8String</type>
								<parameters>
									<parameter>newData</parameter>
								</parameters>
							</new>
						</return>
					</code>
				</function>
				<comment>\SPrints\Sthe\Sstring\Son\Sthe\Sconsole</comment>
				<function depth="1" id="159">
					<name>print</name>
					<code>
						<call depth="2" id="160">
							<function>
								<access>
									<value>flua</value>
									<value>writeXbytesLine</value>
								</access>
							</function>
							<parameters>
								<parameter>
									<access>
										<value>my</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>
									<access>
										<value>my</value>
										<value>lengthInBytes</value>
									</access>
								</parameter>
							</parameters>
						</call>
					</code>
				</function>
				<comment>\SWrites\Sthe\Sstring\Son\Sthe\Sconsole\Swithout\Sa\Snewline\Scharacter</comment>
				<function depth="1" id="161">
					<name>write</name>
					<code>
						<call depth="2" id="162">
							<function>
								<access>
									<value>flua</value>
									<value>writeXbytes</value>
								</access>
							</function>
							<parameters>
								<parameter>
									<access>
										<value>my</value>
										<value>data</value>
									</access>
								</parameter>
								<parameter>
									<access>
										<value>my</value>
										<value>lengthInBytes</value>
									</access>
								</parameter>
							</parameters>
						</call>
						<call depth="2" id="163">
							<function>
								<access>
									<value>flua</value>
									<value>flush</value>
								</access>
							</function>
							<parameters/>
						</call>
					</code>
				</function>
				<iterators depth="1" id="164">
					<iterator-type depth="2" id="165">
						<name>default</name>
						<code>
							<assign depth="3" id="166">
								<value>pos</value>
								<value>0</value>
							</assign>
							<while depth="3" id="167">
								<condition>
									<less>
										<value>pos</value>
										<value>
											<access>
												<value>my</value>
												<value>length</value>
											</access>
										</value>
									</less>
								</condition>
								<code>
									<yield depth="4" id="168">
										<index>
											<value>my</value>
											<value>pos</value>
										</index>
									</yield>
									<assign-add depth="4" id="169">
										<value>pos</value>
										<value>1</value>
									</assign-add>
								</code>
							</while>
						</code>
					</iterator-type>
					<iterator-type depth="2" id="170">
						<name>lines</name>
						<code>
							<assign depth="3" id="171">
								<value>pos</value>
								<value>0</value>
							</assign>
							<assign depth="3" id="172">
								<value>nextNewline</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</assign>
							<while depth="3" id="173">
								<condition>1</condition>
								<code>
									<assign depth="4" id="174">
										<value>nextNewline</value>
										<value>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>findByteIndex</value>
													</access>
												</function>
												<parameters>
													<parameter>10</parameter>
													<parameter>pos</parameter>
												</parameters>
											</call>
										</value>
									</assign>
									<yield depth="4" id="175">
										<call>
											<function>
												<access>
													<value>my</value>
													<value>substrBytes</value>
												</access>
											</function>
											<parameters>
												<parameter>pos</parameter>
												<parameter>nextNewline</parameter>
											</parameters>
										</call>
									</yield>
									<if-block depth="4" id="176">
										<if>
											<condition>
												<equal>
													<value>nextNewline</value>
													<value>
														<negative>
															<value>1</value>
														</negative>
													</value>
												</equal>
											</condition>
											<code>
												<break depth="5" id="177"/>
											</code>
										</if>
									</if-block>
									<assign depth="4" id="178">
										<value>pos</value>
										<value>
											<add>
												<value>nextNewline</value>
												<value>1</value>
											</add>
										</value>
									</assign>
								</code>
							</while>
						</code>
					</iterator-type>
					<iterator-type depth="2" id="179">
						<parameters>
							<parameter>
								<declare-type>
									<value>separator</value>
									<value>Byte</value>
								</declare-type>
							</parameter>
						</parameters>
						<name>split</name>
						<code>
							<assign depth="3" id="180">
								<value>pos</value>
								<value>0</value>
							</assign>
							<assign depth="3" id="181">
								<value>nextNewline</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</assign>
							<while depth="3" id="182">
								<condition>1</condition>
								<code>
									<assign depth="4" id="183">
										<value>nextNewline</value>
										<value>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>findByteIndex</value>
													</access>
												</function>
												<parameters>
													<parameter>separator</parameter>
													<parameter>pos</parameter>
												</parameters>
											</call>
										</value>
									</assign>
									<yield depth="4" id="184">
										<call>
											<function>
												<access>
													<value>my</value>
													<value>substrBytes</value>
												</access>
											</function>
											<parameters>
												<parameter>pos</parameter>
												<parameter>nextNewline</parameter>
											</parameters>
										</call>
									</yield>
									<if-block depth="4" id="185">
										<if>
											<condition>
												<equal>
													<value>nextNewline</value>
													<value>
														<negative>
															<value>1</value>
														</negative>
													</value>
												</equal>
											</condition>
											<code>
												<break depth="5" id="186"/>
											</code>
										</if>
									</if-block>
									<assign depth="4" id="187">
										<value>pos</value>
										<value>
											<add>
												<value>nextNewline</value>
												<value>1</value>
											</add>
										</value>
									</assign>
								</code>
							</while>
						</code>
					</iterator-type>
					<iterator-type depth="2" id="188">
						<parameters>
							<parameter>
								<declare-type>
									<value>separator</value>
									<value>UTF8String</value>
								</declare-type>
							</parameter>
						</parameters>
						<name>split</name>
						<code>
							<assign depth="3" id="189">
								<value>pos</value>
								<value>0</value>
							</assign>
							<assign depth="3" id="190">
								<value>nextNewline</value>
								<value>
									<negative>
										<value>1</value>
									</negative>
								</value>
							</assign>
							<while depth="3" id="191">
								<condition>1</condition>
								<code>
									<assign depth="4" id="192">
										<value>nextNewline</value>
										<value>
											<call>
												<function>
													<access>
														<value>my</value>
														<value>findByteIndex</value>
													</access>
												</function>
												<parameters>
													<parameter>separator</parameter>
													<parameter>pos</parameter>
												</parameters>
											</call>
										</value>
									</assign>
									<yield depth="4" id="193">
										<call>
											<function>
												<access>
													<value>my</value>
													<value>substrBytes</value>
												</access>
											</function>
											<parameters>
												<parameter>pos</parameter>
												<parameter>nextNewline</parameter>
											</parameters>
										</call>
									</yield>
									<if-block depth="4" id="194">
										<if>
											<condition>
												<equal>
													<value>nextNewline</value>
													<value>
														<negative>
															<value>1</value>
														</negative>
													</value>
												</equal>
											</condition>
											<code>
												<break depth="5" id="195"/>
											</code>
										</if>
									</if-block>
									<assign depth="4" id="196">
										<value>pos</value>
										<value>
											<add>
												<value>nextNewline</value>
												<value>
													<access>
														<value>separator</value>
														<value>lengthInBytes</value>
													</access>
												</value>
											</add>
										</value>
									</assign>
								</code>
							</while>
						</code>
					</iterator-type>
					<iterator-type depth="2" id="197">
						<name>bytes</name>
						<code>
							<assign depth="3" id="198">
								<value>pos</value>
								<value>0</value>
							</assign>
							<while depth="3" id="199">
								<condition>
									<less>
										<value>pos</value>
										<value>
											<access>
												<value>my</value>
												<value>lengthInBytes</value>
											</access>
										</value>
									</less>
								</condition>
								<code>
									<yield depth="4" id="200">
										<index>
											<value>
												<access>
													<value>my</value>
													<value>data</value>
												</access>
											</value>
											<value>pos</value>
										</index>
									</yield>
									<assign-add depth="4" id="201">
										<value>pos</value>
										<value>1</value>
									</assign-add>
								</code>
							</while>
						</code>
					</iterator-type>
				</iterators>
				<get depth="1" id="202">
					<getter depth="2" id="203">
						<name>data</name>
						<code>
							<return depth="3" id="204">
								<access>
									<value>my</value>
									<value>data</value>
								</access>
							</return>
						</code>
					</getter>
					<getter depth="2" id="205">
						<name>length</name>
						<code>
							<ensure depth="3" id="206">
								<greater-or-equal depth="4" id="207">
									<value>result</value>
									<value>0</value>
								</greater-or-equal>
							</ensure>
							<return depth="3" id="208">
								<access>
									<value>my</value>
									<value>length</value>
								</access>
							</return>
						</code>
					</getter>
					<getter depth="2" id="209">
						<name>lengthInBytes</name>
						<code>
							<ensure depth="3" id="210">
								<greater-or-equal depth="4" id="211">
									<value>result</value>
									<value>0</value>
								</greater-or-equal>
							</ensure>
							<return depth="3" id="212">
								<access>
									<value>my</value>
									<value>lengthInBytes</value>
								</access>
							</return>
						</code>
					</getter>
				</get>
				<casts depth="1" id="213">
					<cast-definition depth="2" id="214">
						<to>
							<unmanaged>
								<value>
									<template-call>
										<value>MemPointer</value>
										<value>ConstChar</value>
									</template-call>
								</value>
							</unmanaged>
						</to>
						<code>
							<return depth="3" id="215">
								<access>
									<value>my</value>
									<value>data</value>
								</access>
							</return>
						</code>
					</cast-definition>
				</casts>
			</code>
			<meta/>
		</class>
		<comment>\SExtend\Svirtual\SInt\Sclass\Sby\San\Soperator</comment>
		<class depth="0" id="216">
			<name>Int</name>
			<code>
				<operators depth="1" id="217">
					<operator depth="2" id="218">
						<parameters>
							<parameter>
								<declare-type>
									<value>stri</value>
									<value>UTF8String</value>
								</declare-type>
							</parameter>
						</parameters>
						<name>+</name>
						<code>
							<return depth="3" id="219">
								<new>
									<type>UTF8String</type>
									<parameters>
										<parameter>my</parameter>
										<parameter>stri</parameter>
									</parameters>
								</new>
							</return>
						</code>
					</operator>
				</operators>
			</code>
		</class>
		<comment>\SReturns\Sthe\Slength\Sthe\S#startByte\Sis\Sindicating</comment>
		<function depth="0" id="220">
			<parameters>
				<parameter>
					<declare-type>
						<value>startByte</value>
						<value>Byte</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>utf8ByteLength</name>
			<code>
				<if-block depth="1" id="221">
					<if>
						<condition>
							<equal>
								<value>
									<bitwise-and>
										<value>startByte</value>
										<value>0x80</value>
									</bitwise-and>
								</value>
								<value>0</value>
							</equal>
						</condition>
						<code>
							<return depth="2" id="222">1</return>
						</code>
					</if>
					<else-if depth="1" id="223">
						<condition>
							<equal>
								<value>
									<bitwise-and>
										<value>startByte</value>
										<value>0xE0</value>
									</bitwise-and>
								</value>
								<value>0xC0</value>
							</equal>
						</condition>
						<code>
							<return depth="2" id="224">2</return>
						</code>
					</else-if>
					<else-if depth="1" id="225">
						<condition>
							<equal>
								<value>
									<bitwise-and>
										<value>startByte</value>
										<value>0xF0</value>
									</bitwise-and>
								</value>
								<value>0xE0</value>
							</equal>
						</condition>
						<code>
							<return depth="2" id="226">3</return>
						</code>
					</else-if>
					<else-if depth="1" id="227">
						<condition>
							<equal>
								<value>
									<bitwise-and>
										<value>startByte</value>
										<value>0xF8</value>
									</bitwise-and>
								</value>
								<value>0xF0</value>
							</equal>
						</condition>
						<code>
							<return depth="2" id="228">4</return>
						</code>
					</else-if>
				</if-block>
				<return depth="1" id="229">0</return>
			</code>
		</function>
		<comment>\SReturns\Swhether\S#byte\Sindicates\Sthe\Sbeginning\Sof\Sa\SUTF-8\Scharacter\Ssequence</comment>
		<function depth="0" id="230">
			<parameters>
				<parameter>
					<declare-type>
						<value>byte</value>
						<value>Byte</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>isUTF8StartByte</name>
			<code>
				<return depth="1" id="231">
					<not-equal>
						<value>
							<bitwise-and>
								<value>byte</value>
								<value>0xC0</value>
							</bitwise-and>
						</value>
						<value>0x80</value>
					</not-equal>
				</return>
			</code>
		</function>
		<comment>\SPrints\Sthe\SUTF-8\Sencoded\Sstring\S#stri\Son\Sthe\Sconsole</comment>
		<function depth="0" id="232">
			<parameters>
				<parameter>
					<declare-type>
						<value>stri</value>
						<value>UTF8String</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>print</name>
			<code>
				<call depth="1" id="233">
					<function>
						<access>
							<value>stri</value>
							<value>print</value>
						</access>
					</function>
					<parameters/>
				</call>
			</code>
		</function>
		<comment>\SWrites\Sthe\SUTF-8\Sencoded\Sstring\S#stri\Son\Sthe\Sconsole\Swithout\Sa\Snewline\Scharacter</comment>
		<function depth="0" id="234">
			<parameters>
				<parameter>
					<declare-type>
						<value>stri</value>
						<value>UTF8String</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>write</name>
			<code>
				<call depth="1" id="235">
					<function>
						<access>
							<value>stri</value>
							<value>write</value>
						</access>
					</function>
					<parameters/>
				</call>
			</code>
		</function>
	</code>
</module>
