////////////////////////////////////////////////////////////////////////
// Module:				Blitzprog.Thread.Linux
// Author:				Eduard Urbach
// Description:			Multithreading
////////////////////////////////////////////////////////////////////////

#ifndef BLITZPROG_THREAD_LINUX_HPP_
#define BLITZPROG_THREAD_LINUX_HPP_

////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////

//Modules
#include <Blitzprog/header.hpp>
#include <Blitzprog/Core/Core.hpp>

//C++
#include <pthread.h>

////////////////////////////////////////////////////////////////////////
// Classes
////////////////////////////////////////////////////////////////////////

//Thread
class TThread
{
	public:
		
		////////////////////////////////////////////////////////////////////////
		// Constructors and destructors
		////////////////////////////////////////////////////////////////////////
		
		//TODO: Remove the bad programming style
		
		//Constructor
		TThread()
		{
			
		}
		
		//Constructor
		template <typename returnType>
		TThread(returnType (*func) ())
		{
			SetFunction(func);
		}
		
		//Constructor
		template <typename returnType, typename paramType>
		TThread(returnType (*func) (paramType))
		{
			SetFunction(func);
		}
		
		//Destructor
		~TThread()
		{
			
		}

		////////////////////////////////////////////////////////////////////////
		// Operators
		////////////////////////////////////////////////////////////////////////
		
		
		
		////////////////////////////////////////////////////////////////////////
		// Casts
		////////////////////////////////////////////////////////////////////////
		
		
		
		////////////////////////////////////////////////////////////////////////
		// Methods
		////////////////////////////////////////////////////////////////////////

		
		
		////////////////////////////////////////////////////////////////////////
		// Inline methods
		////////////////////////////////////////////////////////////////////////
		
		//Constructor
		template <typename returnType>
		inline void SetFunction(returnType (*func) ())
		{
			pthreadFunc = reinterpret_cast<void *(*)(void*)>(func);		//TODO: Change this
		}
		
		//Constructor
		template <typename returnType, typename paramType>
		inline void SetFunction(returnType (*func) (paramType))
		{
			pthreadFunc = reinterpret_cast<void *(*)(void*)>(func);		//TODO: Change this
		}
		
		//Run
		inline void Run()
		{
			pthread_create(&pthreadHandle, Null, pthreadFunc, Null);
		}
		
		//Run
		template <typename paramType>
		inline void Run(paramType &param)
		{
			pthread_create(&pthreadHandle, Null, pthreadFunc, reinterpret_cast<void *>(&param));
		}
		
		//Join
		inline void Join()
		{
			pthread_join(pthreadHandle, Null);
		}
		
		//Stop
		inline void Stop()
		{
			//TODO: Should this be implemented?
			//pthread_exit(pthreadHandle);
		}
		
		//Friends
		friend inline bool operator==(TThread &t1, TThread &t2);
		friend inline bool operator!=(TThread &t1, TThread &t2);
		
	protected:
		pthread_t pthreadHandle;
		void *(*pthreadFunc) (void*);
};
typedef SharedPtr<TThread> Thread;
#define CreateThread new TThread

////////////////////////////////////////////////////////////////////////
// Constants
////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////
// Inline functions
////////////////////////////////////////////////////////////////////////

//Operator: ==
inline bool operator==(TThread &t1, TThread &t2)
{
	return pthread_equal(t1.pthreadHandle, t2.pthreadHandle);
}

//Operator: !=
inline bool operator!=(TThread &t1, TThread &t2)
{
	return !pthread_equal(t1.pthreadHandle, t2.pthreadHandle);
}

#endif /*BLITZPROG_THREAD_LINUX_HPP_*/
