import bp.Core.Memory

const arrayMinSize = 1024	# elements, not bytes

Array
	template
		TDataType
	
	init
		self.start = ~MemPointer<TDataType>(arrayMinSize)
		self.end = self.start
		self.endOfStorage = self.start + arrayMinSize
		
	#gcDelete
	#	self.start.free()
	
	add element
		self.end.data = element
		self.end += 1
		if self.end == self.endOfStorage
			self.reserve(self.getLength() * 4)
	
	reserve newSize
		currentSize = self.getLength()
		newMem = ~MemPointer<TDataType>(newSize)
		
		copyMem self.start, newMem, currentSize		# source, dest, size
		self.start.free()
		
		self.end = newMem + currentSize
		self.start = newMem
		self.endOfStorage = newMem + newSize
		
	removeLast
		if self.end != self.start
			self.end -= 1
		
	reverse
		startRev = self.start
		endRev = self.end - 1
		while endRev - startRev > 0
			bp_swap(startRev.data, endRev.data)
			startRev += 1
			endRev -= 1
		
	operator
		[] index
			return self.start[index]
		
	get
		start
			return self.start
		
		end
			return self.end
			
		endOfStorage
			return self.endOfStorage
		
		length
			return self.end - self.start
		
	set
		length newLength
			self.end = self.start + newLength
			if self.end >= self.endOfStorage
				self.reserve(self.getLength() * 4)
	
	#to
	#	~MemPointer<TDataType>
	#		return self.start
