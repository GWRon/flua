<module>
	<header>
		<title/>
		<dependencies>
			<import>bp.Core</import>
		</dependencies>
		<strings/>
	</header>
	<code>
		<target depth="0" id="1">
			<name>C++</name>
			<code>
				<include depth="1" id="2">CharTypes.hpp</include>
			</code>
		</target>
		<extern depth="0" id="3">
			<namespace depth="1" id="4">
				<name>bp</name>
				<code>
					<extern-function depth="2" id="5">
						<name>isAlnum</name>
						<type>Bool</type>
						<meta>
							<no-side-effects>true</no-side-effects>
							<same-output-for-input>true</same-output-for-input>
						</meta>
					</extern-function>
					<extern-function depth="2" id="6">
						<name>isAlpha</name>
						<type>Bool</type>
						<meta>
							<no-side-effects>true</no-side-effects>
							<same-output-for-input>true</same-output-for-input>
						</meta>
					</extern-function>
					<extern-function depth="2" id="7">
						<name>isDigit</name>
						<type>Bool</type>
						<meta>
							<no-side-effects>true</no-side-effects>
							<same-output-for-input>true</same-output-for-input>
						</meta>
					</extern-function>
					<extern-function depth="2" id="8">
						<name>isSpace</name>
						<type>Bool</type>
						<meta>
							<no-side-effects>true</no-side-effects>
							<same-output-for-input>true</same-output-for-input>
						</meta>
					</extern-function>
				</code>
			</namespace>
		</extern>
		<comment>\SReturns\Strue\Sif\S#x\Sis\Salpha-numeric,\Sfalse\Sotherwise</comment>
		<function depth="0" id="9">
			<parameters>
				<parameter>
					<declare-type>
						<value>x</value>
						<value>Byte</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>isAlnum</name>
			<code>
				<return depth="1" id="10">
					<call>
						<function>
							<access>
								<value>bp</value>
								<value>isAlnum</value>
							</access>
						</function>
						<parameters>
							<parameter>x</parameter>
						</parameters>
					</call>
				</return>
			</code>
			<meta/>
		</function>
		<comment>\SReturn\Strue\Sif\S#x\Sis\San\Salphabetic\Sletter,\Sfalse\Sotherwise</comment>
		<function depth="0" id="11">
			<parameters>
				<parameter>
					<declare-type>
						<value>x</value>
						<value>Byte</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>isAlpha</name>
			<code>
				<return depth="1" id="12">
					<call>
						<function>
							<access>
								<value>bp</value>
								<value>isAlpha</value>
							</access>
						</function>
						<parameters>
							<parameter>x</parameter>
						</parameters>
					</call>
				</return>
			</code>
			<meta/>
		</function>
		<comment>\SReturns\Strue\Sif\S#x\Sis\Sa\Sdigit,\Sfalse\Sotherwise</comment>
		<function depth="0" id="13">
			<parameters>
				<parameter>
					<declare-type>
						<value>x</value>
						<value>Byte</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>isDigit</name>
			<code>
				<return depth="1" id="14">
					<call>
						<function>
							<access>
								<value>bp</value>
								<value>isDigit</value>
							</access>
						</function>
						<parameters>
							<parameter>x</parameter>
						</parameters>
					</call>
				</return>
			</code>
			<meta/>
		</function>
		<comment>\SReturns\Strue\Sif\S#x\Sis\Sa\Swhitespace\Scharacter,\Sfalse\Sotherwise</comment>
		<function depth="0" id="15">
			<parameters>
				<parameter>
					<declare-type>
						<value>x</value>
						<value>Byte</value>
					</declare-type>
				</parameter>
			</parameters>
			<name>isSpace</name>
			<code>
				<return depth="1" id="16">
					<call>
						<function>
							<access>
								<value>bp</value>
								<value>isSpace</value>
							</access>
						</function>
						<parameters>
							<parameter>x</parameter>
						</parameters>
					</call>
				</return>
			</code>
			<meta/>
		</function>
	</code>
</module>
