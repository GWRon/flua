import bp.Math
import Point

Circle
	init self.midPoint, self.radius
		...
	
	set
		midPoint nPoint
			self.midPoint = nPoint
			
		radius nRadius
			self.radius = nRadius
			
		diameter nDiameter
			self.radius = nDiameter / 2
	
	get
		midPoint
			return self.midPoint
			
		radius
			return self.radius
			
		diameter
			return self.radius * 2
		
		# TODO: english
		umfang
			return 2 * Ï€ * self.radius
		
	contains point
		return distanceSq(self.midPoint.x, self.midPoint.y, point.x, point.y) <= (self.radius * self.radius)
	
	# TODO: Polymorphism	
	#contains circle : Circle
	#	...
		
	intersects circle
		distance = distanceSq(self.midPoint.x, self.midPoint.y, circle.midPoint.x, circle.midPoint.y)
		sumRadi = self.radius + circle.radius
		return d < (sumRadi * sumRadi)
