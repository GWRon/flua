<module>
	<header>
		<title/>
		<dependencies>
			<import>
				bp.Core
			</import>
			<import>
				keywordsTest2
			</import>
		</dependencies>
		<strings>
			<string id="bp_string_0">
				#if working
			</string>
			<string id="bp_string_1">
				#elif NOT working
			</string>
			<string id="bp_string_2">
				#elif working
			</string>
			<string id="bp_string_3">
				#elif NOT working
			</string>
			<string id="bp_string_4">
				#else NOT working
			</string>
			<string id="bp_string_5">
				#else working
			</string>
			<string id="bp_string_6">
				#switch NOT working
			</string>
			<string id="bp_string_7">
				#switch working
			</string>
			<string id="bp_string_8">
				#switch NOT working
			</string>
			<string id="bp_string_9">
				#for working
			</string>
			<string id="bp_string_10">
				#for NOT working
			</string>
			<string id="bp_string_11">
				#while working
			</string>
			<string id="bp_string_12">
				#while NOT working
			</string>
			<string id="bp_string_13">
				#try working
			</string>
			<string id="bp_string_14">
				#catch working
			</string>
			<string id="bp_string_15">
				#static working
			</string>
			<string id="bp_string_16">
				#private working
			</string>
			<string id="bp_string_17">
				#return working
			</string>
			<string id="bp_string_18">
				#const working
			</string>
			<string id="bp_string_19">
				#break working
			</string>
			<string id="bp_string_20">
				#break NOT working
			</string>
			<string id="bp_string_21">
				#continue working
			</string>
			<string id="bp_string_22">
				#continue NOT working
			</string>
			<string id="bp_string_23">
				Simple exception
			</string>
			<string id="bp_string_24">
				#throw NOT working
			</string>
			<string id="bp_string_25">
				#throw working
			</string>
		</strings>
	</header>
	<code>
		<if-block>
			<if>
				<condition>
					1
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_0
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
		</if-block>
		<if-block>
			<if>
				<condition>
					0
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_1
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
			<else-if>
				<condition>
					1
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_2
							</parameter>
						</parameters>
					</call>
				</code>
			</else-if>
			<else>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_3
							</parameter>
						</parameters>
					</call>
				</code>
			</else>
		</if-block>
		<if-block>
			<if>
				<condition>
					0
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_4
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
			<else>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_5
							</parameter>
						</parameters>
					</call>
				</code>
			</else>
		</if-block>
		<switch>
			<value>
				<add>
					<value>
						21
					</value>
					<value>
						21
					</value>
				</add>
			</value>
			<case>
				<values>
					<value>
						40
					</value>
					<value>
						41
					</value>
				</values>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_6
							</parameter>
						</parameters>
					</call>
				</code>
			</case>
			<case>
				<values>
					<value>
						42
					</value>
					<value>
						43
					</value>
				</values>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_7
							</parameter>
						</parameters>
					</call>
				</code>
			</case>
			<case>
				<values>
					<value>
						44
					</value>
					<value>
						45
					</value>
				</values>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_8
							</parameter>
						</parameters>
					</call>
				</code>
			</case>
		</switch>
		<assign>
			<value>
				xTest
			</value>
			<value>
				0
			</value>
		</assign>
		<for>
			<iterator>
				xTest
			</iterator>
			<from>
				1
			</from>
			<to>
				10
			</to>
			<code>
				<assign>
					<value>
						xTest
					</value>
					<value>
						<divide>
							<value>
								<multiply>
									<value>
										xTest
									</value>
									<value>
										2
									</value>
								</multiply>
							</value>
							<value>
								2
							</value>
						</divide>
					</value>
				</assign>
			</code>
		</for>
		<if-block>
			<if>
				<condition>
					<equal>
						<value>
							xTest
						</value>
						<value>
							11
						</value>
					</equal>
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_9
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
			<else>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_10
							</parameter>
						</parameters>
					</call>
				</code>
			</else>
		</if-block>
		<assign>
			<value>
				cTest
			</value>
			<value>
				0
			</value>
		</assign>
		<while>
			<condition>
				<less>
					<value>
						cTest
					</value>
					<value>
						10
					</value>
				</less>
			</condition>
			<code>
				<assign-add>
					<value>
						cTest
					</value>
					<value>
						2
					</value>
				</assign-add>
			</code>
		</while>
		<if-block>
			<if>
				<condition>
					<greater-or-equal>
						<value>
							cTest
						</value>
						<value>
							10
						</value>
					</greater-or-equal>
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_11
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
			<else>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_12
							</parameter>
						</parameters>
					</call>
				</code>
			</else>
		</if-block>
		<try-block>
			<try>
				<code>
					<assign>
						<value>
							a
						</value>
						<value>
							<divide>
								<value>
									1
								</value>
								<value>
									0
								</value>
							</divide>
						</value>
					</assign>
				</code>
			</try>
			<catch>
				<variable/>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_13
							</parameter>
						</parameters>
					</call>
				</code>
			</catch>
		</try-block>
		<try-block>
			<try>
				<code>
					<assign>
						<value>
							a
						</value>
						<value>
							<divide>
								<value>
									1
								</value>
								<value>
									0
								</value>
							</divide>
						</value>
					</assign>
				</code>
			</try>
			<catch>
				<variable>
					<declare-type>
						<value>
							e
						</value>
						<value>
							ArrayOutOfBoundsException
						</value>
					</declare-type>
				</variable>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_14
							</parameter>
						</parameters>
					</call>
				</code>
			</catch>
		</try-block>
		<class>
			<name>
				StaticClass
			</name>
			<code>
				<function>
					<name>
						init
					</name>
					<code>
						<call>
							<function>
								print
							</function>
							<parameters>
								<parameter>
									bp_string_15
								</parameter>
							</parameters>
						</call>
					</code>
				</function>
			</code>
		</class>
		<class>
			<name>
				TestClass
			</name>
			<code>
				<function>
					<name>
						init
					</name>
					<code>
						<noop/>
					</code>
				</function>
				<private>
					<function>
						<name>
							privateFunc
						</name>
						<code>
							<call>
								<function>
									print
								</function>
								<parameters>
									<parameter>
										bp_string_16
									</parameter>
								</parameters>
							</call>
						</code>
					</function>
				</private>
			</code>
		</class>
		<assign>
			<value>
				obj
			</value>
			<value>
				<new>
					<type>
						TestClass
					</type>
					<parameters/>
				</new>
			</value>
		</assign>
		<function>
			<parameters>
				<parameter>
					a
				</parameter>
			</parameters>
			<name>
				halfOf
			</name>
			<code>
				<return>
					<divide>
						<value>
							a
						</value>
						<value>
							2
						</value>
					</divide>
				</return>
			</code>
		</function>
		<if-block>
			<if>
				<condition>
					<equal>
						<value>
							<call>
								<function>
									halfOf
								</function>
								<parameters>
									<parameter>
										5
									</parameter>
								</parameters>
							</call>
						</value>
						<value>
							2.5
						</value>
					</equal>
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_17
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
		</if-block>
		<const>
			<assign>
				<value>
					myConst
				</value>
				<value>
					13.0
				</value>
			</assign>
		</const>
		<if-block>
			<if>
				<condition>
					<equal>
						<value>
							myConst
						</value>
						<value>
							13.0
						</value>
					</equal>
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_18
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
		</if-block>
		<assign>
			<value>
				y
			</value>
			<value>
				0
			</value>
		</assign>
		<while>
			<condition>
				<less>
					<value>
						y
					</value>
					<value>
						20
					</value>
				</less>
			</condition>
			<code>
				<if-block>
					<if>
						<condition>
							<greater>
								<value>
									y
								</value>
								<value>
									10
								</value>
							</greater>
						</condition>
						<code>
							<break/>
						</code>
					</if>
				</if-block>
				<assign-add>
					<value>
						y
					</value>
					<value>
						1
					</value>
				</assign-add>
			</code>
		</while>
		<if-block>
			<if>
				<condition>
					<less>
						<value>
							y
						</value>
						<value>
							20
						</value>
					</less>
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_19
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
			<else>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_20
							</parameter>
						</parameters>
					</call>
				</code>
			</else>
		</if-block>
		<assign>
			<value>
				x
			</value>
			<value>
				0
			</value>
		</assign>
		<assign>
			<value>
				y
			</value>
			<value>
				0
			</value>
		</assign>
		<while>
			<condition>
				<less>
					<value>
						x
					</value>
					<value>
						100
					</value>
				</less>
			</condition>
			<code>
				<assign-add>
					<value>
						x
					</value>
					<value>
						1
					</value>
				</assign-add>
				<if-block>
					<if>
						<condition>
							<not-equal>
								<value>
									<modulo>
										<value>
											x
										</value>
										<value>
											2
										</value>
									</modulo>
								</value>
								<value>
									0
								</value>
							</not-equal>
						</condition>
						<code>
							<continue/>
						</code>
					</if>
				</if-block>
				<assign-add>
					<value>
						y
					</value>
					<value>
						1
					</value>
				</assign-add>
			</code>
		</while>
		<if-block>
			<if>
				<condition>
					<and>
						<value>
							<equal>
								<value>
									x
								</value>
								<value>
									100
								</value>
							</equal>
						</value>
						<value>
							<equal>
								<value>
									y
								</value>
								<value>
									50
								</value>
							</equal>
						</value>
					</and>
				</condition>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_21
							</parameter>
						</parameters>
					</call>
				</code>
			</if>
			<else>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_22
							</parameter>
						</parameters>
					</call>
				</code>
			</else>
		</if-block>
		<try-block>
			<try>
				<code>
					<throw>
						bp_string_23
					</throw>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_24
							</parameter>
						</parameters>
					</call>
				</code>
			</try>
			<catch>
				<variable>
					e
				</variable>
				<code>
					<call>
						<function>
							print
						</function>
						<parameters>
							<parameter>
								bp_string_25
							</parameter>
						</parameters>
					</call>
				</code>
			</catch>
		</try-block>
	</code>
</module>
