<module>
	<header>
		<title/>
		<dependencies>
			<import>bp.Core</import>
			<import>bp.Core.Memory</import>
		</dependencies>
		<strings/>
	</header>
	<code>
		<const depth="0">
			<assign>
				<value>arrayMinSize</value>
				<value>1024</value>
			</assign>
		</const>
		<class depth="0">
			<name>Array</name>
			<code>
				<template depth="1">
					<parameter depth="2">TDataType</parameter>
				</template>
				<function depth="1">
					<name>init</name>
					<code>
						<assign depth="2">
							<value>
								<access>
									<value>self</value>
									<value>start</value>
								</access>
							</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>arrayMinSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<assign depth="2">
							<value>
								<access>
									<value>self</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<access>
									<value>self</value>
									<value>start</value>
								</access>
							</value>
						</assign>
						<assign depth="2">
							<value>
								<access>
									<value>self</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>
										<access>
											<value>self</value>
											<value>start</value>
										</access>
									</value>
									<value>arrayMinSize</value>
								</add>
							</value>
						</assign>
					</code>
				</function>
				<function depth="1">
					<parameters>
						<parameter>element</parameter>
					</parameters>
					<name>add</name>
					<code>
						<assign depth="2">
							<value>
								<access>
									<value>
										<access>
											<value>self</value>
											<value>end</value>
										</access>
									</value>
									<value>data</value>
								</access>
							</value>
							<value>element</value>
						</assign>
						<assign-add depth="2">
							<value>
								<access>
									<value>self</value>
									<value>end</value>
								</access>
							</value>
							<value>1</value>
						</assign-add>
						<if-block depth="2">
							<if>
								<condition>
									<equal>
										<value>
											<access>
												<value>self</value>
												<value>end</value>
											</access>
										</value>
										<value>
											<access>
												<value>self</value>
												<value>endOfStorage</value>
											</access>
										</value>
									</equal>
								</condition>
								<code>
									<call depth="3">
										<function>
											<access>
												<value>self</value>
												<value>reserve</value>
											</access>
										</function>
										<parameters>
											<parameter>
												<multiply>
													<value>
														<call>
															<function>
																<access>
																	<value>self</value>
																	<value>getLength</value>
																</access>
															</function>
															<parameters/>
														</call>
													</value>
													<value>4</value>
												</multiply>
											</parameter>
										</parameters>
									</call>
								</code>
							</if>
						</if-block>
					</code>
				</function>
				<function depth="1">
					<parameters>
						<parameter>newSize</parameter>
					</parameters>
					<name>reserve</name>
					<code>
						<assign depth="2">
							<value>currentSize</value>
							<value>
								<call>
									<function>
										<access>
											<value>self</value>
											<value>getLength</value>
										</access>
									</function>
									<parameters/>
								</call>
							</value>
						</assign>
						<assign depth="2">
							<value>newMem</value>
							<value>
								<unmanaged>
									<value>
										<new>
											<type>
												<template-call>
													<value>MemPointer</value>
													<value>TDataType</value>
												</template-call>
											</type>
											<parameters>
												<parameter>newSize</parameter>
											</parameters>
										</new>
									</value>
								</unmanaged>
							</value>
						</assign>
						<call depth="2">
							<function>copyMem</function>
							<parameters>
								<parameter>
									<access>
										<value>self</value>
										<value>start</value>
									</access>
								</parameter>
								<parameter>newMem</parameter>
								<parameter>currentSize</parameter>
							</parameters>
						</call>
						<call depth="2">
							<function>
								<access>
									<value>
										<access>
											<value>self</value>
											<value>start</value>
										</access>
									</value>
									<value>free</value>
								</access>
							</function>
							<parameters/>
						</call>
						<assign depth="2">
							<value>
								<access>
									<value>self</value>
									<value>end</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>currentSize</value>
								</add>
							</value>
						</assign>
						<assign depth="2">
							<value>
								<access>
									<value>self</value>
									<value>start</value>
								</access>
							</value>
							<value>newMem</value>
						</assign>
						<assign depth="2">
							<value>
								<access>
									<value>self</value>
									<value>endOfStorage</value>
								</access>
							</value>
							<value>
								<add>
									<value>newMem</value>
									<value>newSize</value>
								</add>
							</value>
						</assign>
					</code>
				</function>
				<function depth="1">
					<name>removeLast</name>
					<code>
						<if-block depth="2">
							<if>
								<condition>
									<not-equal>
										<value>
											<access>
												<value>self</value>
												<value>end</value>
											</access>
										</value>
										<value>
											<access>
												<value>self</value>
												<value>start</value>
											</access>
										</value>
									</not-equal>
								</condition>
								<code>
									<assign-subtract depth="3">
										<value>
											<access>
												<value>self</value>
												<value>end</value>
											</access>
										</value>
										<value>1</value>
									</assign-subtract>
								</code>
							</if>
						</if-block>
					</code>
				</function>
				<function depth="1">
					<name>reverse</name>
					<code>
						<assign depth="2">
							<value>startRev</value>
							<value>
								<access>
									<value>self</value>
									<value>start</value>
								</access>
							</value>
						</assign>
						<assign depth="2">
							<value>endRev</value>
							<value>
								<subtract>
									<value>
										<access>
											<value>self</value>
											<value>end</value>
										</access>
									</value>
									<value>1</value>
								</subtract>
							</value>
						</assign>
						<while depth="2">
							<condition>
								<greater>
									<value>
										<subtract>
											<value>endRev</value>
											<value>startRev</value>
										</subtract>
									</value>
									<value>0</value>
								</greater>
							</condition>
							<code>
								<call depth="3">
									<function>bp_swap</function>
									<parameters>
										<parameter>
											<access>
												<value>startRev</value>
												<value>data</value>
											</access>
										</parameter>
										<parameter>
											<access>
												<value>endRev</value>
												<value>data</value>
											</access>
										</parameter>
									</parameters>
								</call>
								<assign-add depth="3">
									<value>startRev</value>
									<value>1</value>
								</assign-add>
								<assign-subtract depth="3">
									<value>endRev</value>
									<value>1</value>
								</assign-subtract>
							</code>
						</while>
					</code>
				</function>
				<operators depth="1">
					<operator depth="2">
						<parameters>
							<parameter>index</parameter>
						</parameters>
						<name>[]</name>
						<code>
							<return depth="3">
								<index>
									<value>
										<access>
											<value>self</value>
											<value>start</value>
										</access>
									</value>
									<value>index</value>
								</index>
							</return>
						</code>
					</operator>
				</operators>
				<get depth="1">
					<getter depth="2">
						<name>start</name>
						<code>
							<return depth="3">
								<access>
									<value>self</value>
									<value>start</value>
								</access>
							</return>
						</code>
					</getter>
					<getter depth="2">
						<name>end</name>
						<code>
							<return depth="3">
								<access>
									<value>self</value>
									<value>end</value>
								</access>
							</return>
						</code>
					</getter>
					<getter depth="2">
						<name>endOfStorage</name>
						<code>
							<return depth="3">
								<access>
									<value>self</value>
									<value>endOfStorage</value>
								</access>
							</return>
						</code>
					</getter>
					<getter depth="2">
						<name>length</name>
						<code>
							<return depth="3">
								<subtract>
									<value>
										<access>
											<value>self</value>
											<value>end</value>
										</access>
									</value>
									<value>
										<access>
											<value>self</value>
											<value>start</value>
										</access>
									</value>
								</subtract>
							</return>
						</code>
					</getter>
				</get>
				<set depth="1">
					<setter depth="2">
						<parameters>
							<parameter>newLength</parameter>
						</parameters>
						<name>length</name>
						<code>
							<assign depth="3">
								<value>
									<access>
										<value>self</value>
										<value>end</value>
									</access>
								</value>
								<value>
									<add>
										<value>
											<access>
												<value>self</value>
												<value>start</value>
											</access>
										</value>
										<value>newLength</value>
									</add>
								</value>
							</assign>
							<if-block depth="3">
								<if>
									<condition>
										<greater-or-equal>
											<value>
												<access>
													<value>self</value>
													<value>end</value>
												</access>
											</value>
											<value>
												<access>
													<value>self</value>
													<value>endOfStorage</value>
												</access>
											</value>
										</greater-or-equal>
									</condition>
									<code>
										<call depth="4">
											<function>
												<access>
													<value>self</value>
													<value>reserve</value>
												</access>
											</function>
											<parameters>
												<parameter>
													<multiply>
														<value>
															<call>
																<function>
																	<access>
																		<value>self</value>
																		<value>getLength</value>
																	</access>
																</function>
																<parameters/>
															</call>
														</value>
														<value>4</value>
													</multiply>
												</parameter>
											</parameters>
										</call>
									</code>
								</if>
							</if-block>
						</code>
					</setter>
				</set>
			</code>
		</class>
	</code>
</module>
